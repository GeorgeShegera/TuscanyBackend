// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tuscany.DataAccess.DB;

#nullable disable

namespace Tuscany.DataAccess.Migrations
{
    [DbContext(typeof(DbTuscanyContext))]
    partial class DbTuscanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tuscany.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TourId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Comment__3214EC0761075742");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Tuscany.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Gallery__3214EC0761075742");

                    b.HasIndex("TourId");

                    b.ToTable("Gallery", (string)null);
                });

            modelBuilder.Entity("Tuscany.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("Language");

                    b.HasKey("Id")
                        .HasName("PK__Language__3214EC079A30EB58");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Tuscany.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TourSchedule")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__Orders__3214EC078848EF55");

                    b.HasIndex("PaymentMethod");

                    b.HasIndex("StatusId");

                    b.HasIndex("TourSchedule");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tuscany.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK__OrderSta__3214EC072A1429BD");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("Tuscany.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("PaymentMethod");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07477C3DEC");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Tuscany.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Tickets__3214EC07C5423841");

                    b.HasIndex("OrderId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Tuscany.Models.TicketsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id")
                        .HasName("PK__TicketsT__3214EC07E2A2C659");

                    b.ToTable("TicketsTypes");
                });

            modelBuilder.Entity("Tuscany.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AdultPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ChildPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DepAndArrivAreas")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Details")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal?>("EntryFees")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("GuideService")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfGroup")
                        .HasColumnType("int");

                    b.Property<int>("MinNumberOfGroup")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("TransportId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Tours__3214EC07E8E8015F");

                    b.HasIndex("TransportId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Tuscany.Models.ToursLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ToursLan__3214EC07DECEEAC7");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TourId");

                    b.ToTable("ToursLanguages");
                });

            modelBuilder.Entity("Tuscany.Models.ToursSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("ScheduleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__ToursSch__3214EC07114C5514");

                    b.HasIndex("ScheduleTypeId");

                    b.HasIndex("TourId");

                    b.ToTable("ToursSchedule", (string)null);
                });

            modelBuilder.Entity("Tuscany.Models.ToursScheduleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ScheduleType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK__ToursSch__3214EC07A67A3A2B");

                    b.ToTable("ToursScheduleType", (string)null);
                });

            modelBuilder.Entity("Tuscany.Models.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id")
                        .HasName("PK__Transpor__3214EC0763F393C4");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("Tuscany.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Tuscany.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Tuscany.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tuscany.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Tuscany.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tuscany.Models.Comment", b =>
                {
                    b.HasOne("Tuscany.Models.Tour", "Tour")
                        .WithMany("Comments")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK__Comment__TourId__42CFD17E");

                    b.HasOne("Tuscany.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Comment__UserId__8E2F1I7O");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tuscany.Models.Gallery", b =>
                {
                    b.HasOne("Tuscany.Models.Tour", "Tour")
                        .WithMany("Galleries")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Gallery__TourId__48CFD27E");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tuscany.Models.Order", b =>
                {
                    b.HasOne("Tuscany.Models.PaymentMethod", "PaymentMethodNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethod")
                        .HasConstraintName("FK__Orders__PaymentM__5EBF139D");

                    b.HasOne("Tuscany.Models.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__StatusId__5DCAEF64");

                    b.HasOne("Tuscany.Models.ToursSchedule", "TourScheduleNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("TourSchedule")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__TourSche__5BE2A6F2");

                    b.HasOne("Tuscany.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Orders_To_User");

                    b.Navigation("PaymentMethodNavigation");

                    b.Navigation("Status");

                    b.Navigation("TourScheduleNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tuscany.Models.Ticket", b =>
                {
                    b.HasOne("Tuscany.Models.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Tickets__OrderId__656C112C");

                    b.HasOne("Tuscany.Models.TicketsType", "Type")
                        .WithMany("Tickets")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_To_TicketType");

                    b.Navigation("Order");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Tuscany.Models.Tour", b =>
                {
                    b.HasOne("Tuscany.Models.Transport", "Transport")
                        .WithMany("Tours")
                        .HasForeignKey("TransportId")
                        .IsRequired()
                        .HasConstraintName("FK__Tours__Transport__4222D4EF");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Tuscany.Models.ToursLanguage", b =>
                {
                    b.HasOne("Tuscany.Models.Language", "Language")
                        .WithMany("ToursLanguages")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK__ToursLang__Langu__4E88ABD4");

                    b.HasOne("Tuscany.Models.Tour", "Tour")
                        .WithMany("ToursLanguages")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__ToursLang__TourI__4F7CD00D");

                    b.Navigation("Language");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tuscany.Models.ToursSchedule", b =>
                {
                    b.HasOne("Tuscany.Models.ToursScheduleType", "ScheduleType")
                        .WithMany("ToursSchedules")
                        .HasForeignKey("ScheduleTypeId")
                        .HasConstraintName("FK_Schedule_To_ScheduleType");

                    b.HasOne("Tuscany.Models.Tour", "Tour")
                        .WithMany("ToursSchedules")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__ToursSche__TourI__4BAC3F29");

                    b.Navigation("ScheduleType");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Tuscany.Models.Language", b =>
                {
                    b.Navigation("ToursLanguages");
                });

            modelBuilder.Entity("Tuscany.Models.Order", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Tuscany.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Tuscany.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Tuscany.Models.TicketsType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Tuscany.Models.Tour", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Galleries");

                    b.Navigation("ToursLanguages");

                    b.Navigation("ToursSchedules");
                });

            modelBuilder.Entity("Tuscany.Models.ToursSchedule", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Tuscany.Models.ToursScheduleType", b =>
                {
                    b.Navigation("ToursSchedules");
                });

            modelBuilder.Entity("Tuscany.Models.Transport", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("Tuscany.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
